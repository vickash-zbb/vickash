{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/contact.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\r\nimport { DemoResponse } from \"@shared/api\";\r\n\r\nexport const handleDemo: RequestHandler = (req, res) => {\r\n  const response: DemoResponse = {\r\n    message: \"Hello from Express server\",\r\n  };\r\n  res.status(200).json(response);\r\n};\r\n","import { RequestHandler } from \"express\";\r\nimport { z } from \"zod\";\r\nimport nodemailer from \"nodemailer\";\r\n\r\nconst contactFormSchema = z.object({\r\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\r\n  email: z.string().email(\"Please enter a valid email address\"),\r\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\r\n  message: z.string().min(1, \"Message is required\"),\r\n});\r\n\r\n// Email configuration\r\nconst createTransporter = () => {\r\n  const emailUser = process.env.EMAIL_USER;\r\n  const emailPass = process.env.EMAIL_PASS;\r\n\r\n  console.log('Email config check:', {\r\n    userExists: !!emailUser,\r\n    passExists: !!emailPass,\r\n    passLength: emailPass?.length || 0\r\n  });\r\n\r\n  const emailConfig = {\r\n    service: 'gmail',\r\n    auth: {\r\n      user: emailUser,\r\n      pass: emailPass, // Use App Password for Gmail (no spaces)\r\n    },\r\n  };\r\n\r\n  return nodemailer.createTransport(emailConfig);\r\n};\r\n\r\nconst sendContactEmail = async (data: z.infer<typeof contactFormSchema>, clientInfo: { ip?: string; userAgent?: string }) => {\r\n  const transporter = createTransporter();\r\n\r\n  const emailContent = `\r\n    New Contact Form Submission\r\n\r\n    📧 Contact Details:\r\n    Name: ${data.name}\r\n    Email: ${data.email}\r\n    Subject: ${data.subject}\r\n\r\n    💬 Message:\r\n    ${data.message}\r\n\r\n    🌐 Client Information:\r\n    IP Address: ${clientInfo.ip || 'Unknown'}\r\n    User Agent: ${clientInfo.userAgent || 'Unknown'}\r\n    Timestamp: ${new Date().toLocaleString()}\r\n    Reference ID: MSG-${Date.now()}-${Math.random().toString(36).substr(2, 9)}\r\n  `;\r\n\r\n  const mailOptions = {\r\n    from: `\"Portfolio Contact Form\" <${process.env.EMAIL_USER}>`,\r\n    to: 'vickashshivan.designer@gmail.com',\r\n    subject: `🚀 New Contact: ${data.subject}`,\r\n    text: emailContent,\r\n    html: `\r\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;\">\r\n        <h2 style=\"color: #2563eb; margin-bottom: 20px;\">New Contact Form Submission</h2>\r\n\r\n        <div style=\"background-color: #f8fafc; padding: 15px; border-radius: 6px; margin-bottom: 20px;\">\r\n          <h3 style=\"margin: 0 0 10px 0; color: #334155;\">📧 Contact Details</h3>\r\n          <p style=\"margin: 5px 0;\"><strong>Name:</strong> ${data.name}</p>\r\n          <p style=\"margin: 5px 0;\"><strong>Email:</strong> <a href=\"mailto:${data.email}\" style=\"color: #2563eb;\">${data.email}</a></p>\r\n          <p style=\"margin: 5px 0;\"><strong>Subject:</strong> ${data.subject}</p>\r\n        </div>\r\n\r\n        <div style=\"background-color: #f8fafc; padding: 15px; border-radius: 6px; margin-bottom: 20px;\">\r\n          <h3 style=\"margin: 0 0 10px 0; color: #334155;\">💬 Message</h3>\r\n          <p style=\"margin: 0; line-height: 1.6; white-space: pre-wrap;\">${data.message}</p>\r\n        </div>\r\n\r\n        <div style=\"background-color: #f1f5f9; padding: 15px; border-radius: 6px; font-size: 12px; color: #64748b;\">\r\n          <h4 style=\"margin: 0 0 8px 0; color: #475569;\">🌐 Client Information</h4>\r\n          <p style=\"margin: 2px 0;\"><strong>IP Address:</strong> ${clientInfo.ip || 'Unknown'}</p>\r\n          <p style=\"margin: 2px 0;\"><strong>User Agent:</strong> ${clientInfo.userAgent || 'Unknown'}</p>\r\n          <p style=\"margin: 2px 0;\"><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>\r\n          <p style=\"margin: 2px 0;\"><strong>Reference ID:</strong> MSG-${Date.now()}-${Math.random().toString(36).substr(2, 9)}</p>\r\n        </div>\r\n\r\n        <div style=\"margin-top: 20px; padding-top: 15px; border-top: 1px solid #e0e0e0; text-align: center; font-size: 12px; color: #64748b;\">\r\n          <p>This email was sent from your portfolio contact form.</p>\r\n        </div>\r\n      </div>\r\n    `,\r\n    replyTo: data.email, // Allow replying directly to the sender\r\n  };\r\n\r\n  try {\r\n    const info = await transporter.sendMail(mailOptions);\r\n    console.log('Email sent successfully:', info.messageId);\r\n    return { success: true, messageId: info.messageId };\r\n  } catch (error) {\r\n    console.error('Email sending failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const handleContactSubmission: RequestHandler = async (req, res) => {\r\n  try {\r\n    // Validate request body\r\n    const validatedData = contactFormSchema.parse(req.body);\r\n\r\n    // Collect client information\r\n    const clientInfo = {\r\n      ip: req.ip,\r\n      userAgent: req.get('User-Agent'),\r\n    };\r\n\r\n    // Log the submission\r\n    console.log(\"Contact form submission received:\", {\r\n      ...validatedData,\r\n      timestamp: new Date().toISOString(),\r\n      ...clientInfo\r\n    });\r\n\r\n    // Check if email credentials are configured\r\n    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {\r\n      console.warn('Email credentials not configured. Email will not be sent.');\r\n      // Still return success to not break the user experience\r\n      const response = {\r\n        success: true,\r\n        message: \"Thank you for your message! I'll get back to you within 24 hours.\",\r\n        data: {\r\n          submittedAt: new Date().toISOString(),\r\n          referenceId: `MSG-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n          name: validatedData.name\r\n        }\r\n      };\r\n      return res.status(200).json(response);\r\n    }\r\n\r\n    // Send email notification\r\n    console.log('Attempting to send email with credentials:', {\r\n      user: process.env.EMAIL_USER,\r\n      passLength: process.env.EMAIL_PASS?.length\r\n    });\r\n    await sendContactEmail(validatedData, clientInfo);\r\n\r\n    const response = {\r\n      success: true,\r\n      message: \"Thank you for your message! I'll get back to you within 24 hours.\",\r\n      data: {\r\n        submittedAt: new Date().toISOString(),\r\n        referenceId: `MSG-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n        name: validatedData.name\r\n      }\r\n    };\r\n\r\n    res.status(200).json(response);\r\n\r\n  } catch (error) {\r\n    console.error(\"Contact form submission error:\", error);\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: \"Invalid form data\",\r\n        errors: error.errors.map(err => ({\r\n          field: err.path.join('.'),\r\n          message: err.message\r\n        }))\r\n      });\r\n    }\r\n\r\n    // Detailed error logging for email issues\r\n    if (error.code === 'EAUTH') {\r\n      console.error('❌ Gmail authentication failed. Check App Password.');\r\n    } else if (error.code === 'ENOTFOUND') {\r\n      console.error('❌ Network connection issue.');\r\n    } else {\r\n      console.error('❌ Email error details:', {\r\n        code: error.code,\r\n        message: error.message,\r\n        stack: error.stack\r\n      });\r\n    }\r\n\r\n    res.status(500).json({\r\n      success: false,\r\n      message: \"Failed to send message. Please try again or contact directly via email.\"\r\n    });\r\n  }\r\n};\r\n","import \"dotenv/config\";\r\nimport express from \"express\";\r\nimport cors from \"cors\";\r\nimport { handleDemo } from \"./routes/demo\";\r\nimport { handleContactSubmission } from \"./routes/contact\";\r\n\r\nexport function createServer() {\r\n  const app = express();\r\n\r\n  // Middleware\r\n  app.use(cors());\r\n  app.use(express.json());\r\n  app.use(express.urlencoded({ extended: true }));\r\n\r\n  // Example API routes\r\n  app.get(\"/api/ping\", (_req, res) => {\r\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\r\n    res.json({ message: ping });\r\n  });\r\n\r\n  app.get(\"/api/demo\", handleDemo);\r\n  app.post(\"/api/contact\", handleContactSubmission);\r\n\r\n  return app;\r\n}\r\n","import path from \"path\";\r\nimport { createServer } from \"./index\";\r\nimport * as express from \"express\";\r\n\r\nconst app = createServer();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// In production, serve the built SPA files\r\nconst __dirname = import.meta.dirname;\r\nconst distPath = path.join(__dirname, \"../spa\");\r\n\r\n// Serve static files\r\napp.use(express.static(distPath));\r\n\r\n// Handle React Router - serve index.html for all non-API routes\r\napp.get(\"*\", (req, res) => {\r\n  // Don't serve index.html for API routes\r\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\r\n    return res.status(404).json({ error: \"API endpoint not found\" });\r\n  }\r\n\r\n  res.sendFile(path.join(distPath, \"index.html\"));\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\r\n  console.log(`📱 Frontend: http://localhost:${port}`);\r\n  console.log(`🔧 API: http://localhost:${port}/api`);\r\n});\r\n\r\n// Graceful shutdown\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n\r\nprocess.on(\"SIGINT\", () => {\r\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\r\n  process.exit(0);\r\n});\r\n"],"names":["response","app","express"],"mappings":"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"}